{"version":3,"sources":["live-streaming/LiveStreaming.js","App.js","reportWebVitals.js","index.js"],"names":["rtc","client","joined","published","localStream","remoteStreams","params","option","joinChannel","role","AgoraRTC","createClient","mode","codec","init","console","log","join","uid","document","getElementById","disabled","setClientRole","createStream","streamID","audio","video","play","publish","err","error","on","evt","stopped","remoteStream","stream","id","getId","subscribe","pause","LiveVideoStreaming","props","className","onClick","unpublish","alert","leave","ev","style","width","height","display","margin","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2a85b1b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport AgoraRTC from \"agora-rtc-sdk\";\r\n\r\n\r\nvar rtc = {\r\n    client: null,\r\n    joined: false,\r\n    published: false,\r\n    localStream: null,\r\n    remoteStreams: [],\r\n    params: {},\r\n};\r\n\r\n// Options for joining a channel\r\nvar option = {\r\n    appID: \"c78e9a77eb5b4f829d8c80fd52749254\",\r\n    channel: \"video-calling\",\r\n    uid: null,\r\n    token: \"006c78e9a77eb5b4f829d8c80fd52749254IAA1uqosvvubbe1gaojpOuFYTwQeOgRgAdbIsmw5VP8F+jO6nq0AAAAAEADK+JrRzbsDYQEAAQDMuwNh\",\r\n    key: '',\r\n    secret: ''\r\n}\r\n\r\nfunction joinChannel(role) {\r\n    // Create a client\r\n    rtc.client = AgoraRTC.createClient({ mode: \"live\", codec: \"h264\" });\r\n    // Initialize the client\r\n    rtc.client.init(option.appID, function () {\r\n        console.log(\"init success\");\r\n\r\n        // Join a channel\r\n        rtc.client.join(option.token ?\r\n            option.token : null,\r\n            option.channel, option.uid ? +option.uid : null, function (uid) {\r\n                console.log(\"join channel: \" + option.channel + \" success, uid: \" + uid);\r\n                rtc.params.uid = uid;\r\n                if (role === \"host\") {\r\n\r\n                    document.getElementById(\"remote_video_\").disabled = true;\r\n\r\n                    rtc.client.setClientRole(\"host\");\r\n                    // Create a local stream\r\n\r\n                    rtc.localStream = AgoraRTC.createStream({\r\n                        streamID: rtc.params.uid,\r\n                        audio: true,\r\n                        video: true,\r\n                    })\r\n\r\n                    // Initialize the local stream\r\n                    rtc.localStream.init(function () {\r\n                        console.log(\"init local stream success\");\r\n                        rtc.localStream.play(\"local_stream\");\r\n                        rtc.client.publish(rtc.localStream, function (err) {\r\n                            console.log(\"publish failed\");\r\n                            console.error(err);\r\n                        })\r\n                    }, function (err) {\r\n                        console.error(\"init local stream failed \", err);\r\n                    });\r\n\r\n                    rtc.client.on(\"connection-state-change\", function (evt) {\r\n                        console.log(\"audience\", evt)\r\n                    })\r\n\r\n                    rtc.client.on(\"source-state-change\", (stopped) => {\r\n                        console.log(\"muted\")\r\n                    });\r\n\r\n                }\r\n                if (role === \"audience\") {\r\n\r\n                    document.getElementById(\"local_stream\").disabled = true;\r\n\r\n                    \r\n\r\n                    rtc.client.on(\"connection-state-change\", function (evt) {\r\n                        console.log(\"audience\", evt)\r\n                    })\r\n\r\n                    rtc.client.on(\"stream-added\", function (evt) {\r\n                        var remoteStream = evt.stream;\r\n                        var id = remoteStream.getId();\r\n                        if (id !== rtc.params.uid) {\r\n                            rtc.client.subscribe(remoteStream, function (err) {\r\n                                console.log(\"stream subscribe failed\", err);\r\n                            })\r\n                        }\r\n                        console.log('stream-added remote-uid: ', id);\r\n                    });\r\n\r\n                    rtc.client.on(\"stream-removed\", function (evt) {\r\n                        var remoteStream = evt.stream;\r\n                        var id = remoteStream.getId();\r\n                        console.log('stream-removed remote-uid: ', id);\r\n                    });\r\n\r\n\r\n                    rtc.client.on(\"stream-subscribed\", function (evt) {\r\n                        var remoteStream = evt.stream;\r\n                        var id = remoteStream.getId();\r\n                        remoteStream.play(\"remote_video_\");\r\n                        console.log('stream-subscribed remote-uid: ', id);\r\n                    })\r\n\r\n                    rtc.client.on(\"stream-unsubscribed\", function (evt) {\r\n                        var remoteStream = evt.stream;\r\n                        var id = remoteStream.getId();\r\n                        remoteStream.pause(\"remote_video_\");\r\n                        console.log('stream-unsubscribed remote-uid: ', id);\r\n                    })\r\n                }\r\n            }, function (err) {\r\n                console.error(\"client join failed\", err)\r\n            })\r\n\r\n    }, (err) => {\r\n        console.error(err);\r\n    });\r\n}\r\n\r\nfunction leaveEventHost(params) {\r\n    rtc.client.unpublish(rtc.localStream, function (err) {\r\n        console.log(\"publish failed\");\r\n        alert('You left the meeting as Host')\r\n        console.error(err);\r\n    })\r\n    rtc.client.leave(function (ev) {\r\n        console.log(ev)\r\n    })\r\n}\r\n\r\nfunction leaveEventAudience(params) {\r\n    rtc.client.leave(function () {\r\n        console.log(\"client leaves channel\");\r\n        alert('Left the meeting as an audience')\r\n    }, function (err) {\r\n        console.log(\"client leave failed \", err);\r\n    })\r\n}\r\n\r\n\r\nfunction LiveVideoStreaming(props) {\r\n    return (\r\n        <div className=\"container\">\r\n            <button className=\"btn my-2\" onClick={() => joinChannel('host')}>Join Channel as Host</button>\r\n            <button className=\"btn\" onClick={() => joinChannel('audience')}>Join Channel as Audience</button>\r\n            <button className=\"btn\" onClick={() => leaveEventHost('host')}>Leave Event Host</button>\r\n            <button className=\"btn\" onClick={() => leaveEventAudience('audience')}>Leave Event Audience</button>\r\n            \r\n            <div id=\"local_stream\" className=\"local_stream\" style={{ width: \"100%\", height: \"100vh\", display: \"flex\"}}></div>\r\n            <div\r\n                id=\"remote_video_\"\r\n                style={{ margin:'0px' ,width: \"100%\", height: \"100vh\", display: \"flex\"}}\r\n            >\r\n            </div>\r\n        </div>\r\n    );\r\n}   \r\n\r\nexport default LiveVideoStreaming;","\nimport './App.css';\nimport LiveVideoStreaming from './live-streaming/LiveStreaming';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LiveVideoStreaming></LiveVideoStreaming>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}